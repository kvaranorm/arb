-- Check Game
if game.PlaceId == 96063223159256 then
    -- Fluent Lib
    local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
    local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
    local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()
    local currentVersion = "ARB: Script v1 (Testing)"

    -- Main GUI
    local Window = Fluent:CreateWindow({
        Title = currentVersion,
        SubTitle = "by xyro",
        TabWidth = 160,
        Size = UDim2.fromOffset(580, 460),
        Acrylic = true,
        Theme = "Dark",
        MinimizeKey = Enum.KeyCode.LeftControl
    })

    -- Main Tab
    local Tabs = {
        Main = Window:AddTab({ Title = "Main Tab", Icon = "" }),
        Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
    }

    -- Other Scripts/Global
    local Options = Fluent.Options

    local function getClosestNPC()
        local player = game:GetService("Players").LocalPlayer
        local char = player.Character
        local hrp = char and char:FindFirstChild("HumanoidRootPart")
        if not hrp then return nil end

        local lives = workspace:FindFirstChild("Lives")
        if not lives then return nil end

        local closest = nil
        local shortestDist = math.huge

        for _, npc in ipairs(lives:GetChildren()) do
            if npc.Name == "RegularNationNpc" and npc:FindFirstChild("HumanoidRootPart") then
                local dist = (npc.HumanoidRootPart.Position - hrp.Position).Magnitude
                if dist < shortestDist then
                    closest = npc
                    shortestDist = dist
                end
            end
        end

        return closest
    end

    -- Auto Grip (Npcs)
    local gripLoopRunning = false
    local AutoGripToggle = Tabs.Main:AddToggle("AutoGripToggle", {Title = "Auto Grip Npcs (Toggle)", Default = false, Description = "Spam grips on nearest NPC"})

    AutoGripToggle:OnChanged(function()
        gripLoopRunning = Options.AutoGripToggle.Value
        task.spawn(function()
            while gripLoopRunning do
                local player = game:GetService("Players").LocalPlayer
                local char = player.Character
                local pos = char and char:FindFirstChild("HumanoidRootPart") and char.HumanoidRootPart.Position or nil
                local target = getClosestNPC()

                if target and pos then
                    for _ = 1, 20 do
                        local args = {
                            "Kill",
                            target,
                            pos + Vector3.new(1, 2, 0)
                        }
                        char.Scripts.Server.Grip.Event:FireServer(unpack(args))
                    end
                end

                wait()
            end
        end)
    end)

    -- Auto Grip (Players)
    local playerGripLoopRunning = false
    local whitelist = {
        ["KINcAgU"] = true,
        ["whateversance"] = true
    }

    local AutoGripPlayersToggle = Tabs.Main:AddToggle("AutoGripPlayersToggle", {
        Title = "Auto Grip Players (Toggle)",
        Default = false,
        Description = "Spam grips on players within 20 studs (excluding whitelist)"
    })

    AutoGripPlayersToggle:OnChanged(function()
        playerGripLoopRunning = Options.AutoGripPlayersToggle.Value
        task.spawn(function()
            while playerGripLoopRunning do
                local Players = game:GetService("Players")
                local localPlayer = Players.LocalPlayer
                local char = localPlayer.Character
                local hrp = char and char:FindFirstChild("HumanoidRootPart")
                if not hrp then
                    task.wait(0.5)
                    continue
                end

                for _, plr in ipairs(Players:GetPlayers()) do
                    if
                        plr ~= localPlayer and
                        not whitelist[plr.Name] and
                        plr.Character and
                        plr.Character:FindFirstChild("HumanoidRootPart")
                    then
                        local targetHRP = plr.Character.HumanoidRootPart
                        local dist = (targetHRP.Position - hrp.Position).Magnitude
                        if dist <= 20 then
                            for _ = 1, 20 do
                                local args = {
                                    "Kill",
                                    plr.Character,
                                    hrp.Position + Vector3.new(1, 2, 0)
                                }
                                char.Scripts.Server.Grip.Event:FireServer(unpack(args))
                            end
                        end
                    end
                end

                task.wait()
            end
        end)
    end)

    -- Auto Meditate
    local meditateLoopRunning = false
    local AutoMeditateToggle = Tabs.Main:AddToggle("AutoMeditateToggle", {Title = "Auto Meditate (Toggle)", Default = false, Description = "Starts meditation and spams create key"})

    AutoMeditateToggle:OnChanged(function()
        meditateLoopRunning = Options.AutoMeditateToggle.Value
        task.spawn(function()
            while meditateLoopRunning do
                local meditateArgs = { "Start" }
                game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvents"):WaitForChild("Meditate"):FireServer(unpack(meditateArgs))

                for _ = 1, 5 do
                    local createKeyArgs = { "Complete" }
                    game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvents"):WaitForChild("Create Key"):FireServer(unpack(createKeyArgs))
                    task.wait(0.1)
                end

                wait(1.5)
            end
        end)
    end)
    
    SaveManager:SetLibrary(Fluent)
    InterfaceManager:SetLibrary(Fluent)
    SaveManager:IgnoreThemeSettings()
    SaveManager:SetIgnoreIndexes({})
    InterfaceManager:SetFolder("FluentScriptHub")
    SaveManager:SetFolder("FluentScriptHub/specific-game")
    InterfaceManager:BuildInterfaceSection(Tabs.Settings)
    SaveManager:BuildConfigSection(Tabs.Settings)
    Window:SelectTab(1)
    Fluent:Notify({
        Title = "Fluent",
        Content = "The script has been loaded.",
        Duration = 8
    })
    SaveManager:LoadAutoloadConfig()
end
